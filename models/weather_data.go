// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WeatherData weather data
// swagger:model WeatherData
type WeatherData struct {

	// Clouds of weather
	Clouds float64 `json:"clouds,omitempty"`

	// Deg of weather
	Deg float64 `json:"deg,omitempty"`

	// Date of weather
	Dt float64 `json:"dt,omitempty"`

	// Humidity of weather
	Humidity float64 `json:"humidity,omitempty"`

	// Pressure of weather
	Pressure float64 `json:"pressure,omitempty"`

	// Speed of weather
	Speed float64 `json:"speed,omitempty"`

	// temp
	Temp *WeatherTemp `json:"temp,omitempty"`

	// UVI of weather
	Uvi float64 `json:"uvi,omitempty"`

	// weather
	Weather []*WeatherInfo `json:"weather"`
}

// Validate validates this weather data
func (m *WeatherData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTemp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeather(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeatherData) validateTemp(formats strfmt.Registry) error {

	if swag.IsZero(m.Temp) { // not required
		return nil
	}

	if m.Temp != nil {
		if err := m.Temp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temp")
			}
			return err
		}
	}

	return nil
}

func (m *WeatherData) validateWeather(formats strfmt.Registry) error {

	if swag.IsZero(m.Weather) { // not required
		return nil
	}

	for i := 0; i < len(m.Weather); i++ {
		if swag.IsZero(m.Weather[i]) { // not required
			continue
		}

		if m.Weather[i] != nil {
			if err := m.Weather[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weather" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WeatherData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeatherData) UnmarshalBinary(b []byte) error {
	var res WeatherData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
