// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// City city
// swagger:model City
type City struct {

	// coord
	Coord *CityCoord `json:"coord,omitempty"`

	// Initials of country
	Country string `json:"country,omitempty"`

	// geoname
	Geoname *CityGeoName `json:"geoname,omitempty"`

	// Id of the city
	ID float64 `json:"id,omitempty"`

	// Name of city
	Name string `json:"name,omitempty"`

	// stat
	Stat *CityStat `json:"stat,omitempty"`

	// stations
	Stations []*CityStation `json:"stations"`

	// Zoom of city
	Zoom float64 `json:"zoom,omitempty"`
}

// Validate validates this city
func (m *City) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *City) validateCoord(formats strfmt.Registry) error {

	if swag.IsZero(m.Coord) { // not required
		return nil
	}

	if m.Coord != nil {
		if err := m.Coord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coord")
			}
			return err
		}
	}

	return nil
}

func (m *City) validateGeoname(formats strfmt.Registry) error {

	if swag.IsZero(m.Geoname) { // not required
		return nil
	}

	if m.Geoname != nil {
		if err := m.Geoname.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geoname")
			}
			return err
		}
	}

	return nil
}

func (m *City) validateStat(formats strfmt.Registry) error {

	if swag.IsZero(m.Stat) { // not required
		return nil
	}

	if m.Stat != nil {
		if err := m.Stat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stat")
			}
			return err
		}
	}

	return nil
}

func (m *City) validateStations(formats strfmt.Registry) error {

	if swag.IsZero(m.Stations) { // not required
		return nil
	}

	for i := 0; i < len(m.Stations); i++ {
		if swag.IsZero(m.Stations[i]) { // not required
			continue
		}

		if m.Stations[i] != nil {
			if err := m.Stations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *City) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *City) UnmarshalBinary(b []byte) error {
	var res City
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
